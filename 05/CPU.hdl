// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=instructionTypeA);
    And(a=instruction[14], b=instruction[13], out=doisEmUm);
    And(a=instruction[15], b=doisEmUm, out=instructionTypeC);
    And(a=instructionTypeC, b=instruction[12], out=flagAouM);
    And(a=instructionTypeC, b=instruction[11], out=flagZx);
    And(a=instructionTypeC, b=instruction[10], out=flagNx);
    And(a=instructionTypeC, b=instruction[9], out=flagZy);
    And(a=instructionTypeC, b=instruction[8], out=flagNy);
    And(a=instructionTypeC, b=instruction[7], out=flagF);
    And(a=instructionTypeC, b=instruction[6], out=flagNo);
    And(a=instructionTypeC, b=instruction[5], out=loadA);
    And(a=instructionTypeC, b=instruction[4], out=loadD);
    And(a=instructionTypeC, b=instruction[3], out=writeM);
    And(a=instructionTypeC, b=instruction[2], out=flagJMPWhenNegative);
    And(a=instructionTypeC, b=instruction[1], out=flagJMPWhenZero);
    And(a=instructionTypeC, b=instruction[0], out=flagJMPWhenPositive);

    Mux16(a=ALUOut, b=instruction, sel=instructionTypeA, out=ALUOutMuxinstruction);
    
    //Register A
    Register(in=ALUOutMuxinstruction, load=loadA, out=ARegister, out[0..14]=addressM);
    //Register D
    Register(in=ALUOut, load=loadD, out=DRegister);

    Mux16(a=ARegister, b=inM, sel=flagAouM, out=AMuxinM);

    ALU(x=DRegister, y=AMuxinM, zx=flagZx, nx=flagNx, zy=flagZy, ny=flagNy, f=flagF, no=flagNo, zr=ALUZero, ng=ALUNegativo, out=outM, out=ALUOut);
    
    Or(a=ALUZero, b=ALUNegativo, out=ALUZeroOrNegativo);
    Not(in=ALUZeroOrNegativo, out=ALUPositivo);
    And(a=ALUPositivo, b=flagJMPWhenPositive, out=JGT);
    And(a=ALUNegativo, b=flagJMPWhenNegative, out=JLT);
    And(a=ALUZero, b=flagJMPWhenZero, out=JEQ);
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=JMP);

    PC(in=ARegister, load=JMP, inc=true, reset=reset, out[0..14]=pc);
}